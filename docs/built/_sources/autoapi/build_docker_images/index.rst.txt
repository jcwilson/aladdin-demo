:mod:`build_docker_images`
==========================

.. py:module:: build_docker_images

.. autoapi-nested-parse::

   The aladdin build script indicated in this project's lamp.json file.

   It will run when ``aladdin build`` is invoked.



Module Contents
---------------

.. py:class:: Undefined

   .. method:: __bool__(self)



   .. method:: __str__(self)
      :abstractmethod:




.. data:: UNDEFINED
   

   

.. py:exception:: ConfigurationException

   Bases: :class:`Exception`

   Raised if there is an error in the component.yaml.


.. py:class:: UserInfo

   Bases: :class:`collections.namedtuple()`

   .. method:: __bool__(self)



   .. method:: chown(self)
      :property:




.. py:class:: ComponentConfig(data: dict)

   The representation of the component.yaml.

   .. method:: get(self, path: str, default: typing.Any = UNDEFINED)


      Perform a lookup on the provided path name.

      :param path: The dot-delimited path to the config value.
      :param default: The value to return if the config value was not found.


   .. method:: version(self)
      :property:



   .. method:: language_name(self)
      :property:



   .. method:: language_version(self)
      :property:



   .. method:: image_base(self)
      :property:



   .. method:: image_aladdinize(self)
      :property:



   .. method:: image_add_poetry(self)
      :property:



   .. method:: image_user_info(self)
      :property:



   .. method:: dependencies(self)
      :property:




.. py:class:: BuildInfo

   Bases: :class:`collections.namedtuple()`

   A wrapper around the component config and some other high-level info to make parameterizing
   the build process a bit simpler. The build functions should use this rather than directly
   accessing the config.

   .. method:: set_user_info(self, user_info: UserInfo)



   .. method:: set_language_version(self, version: str)



   .. method:: language_name(self)
      :property:



   .. method:: language_version(self)
      :property:



   .. method:: tag(self)
      :property:



   .. method:: editor_tag(self)
      :property:



   .. method:: dev(self)
      :property:



   .. method:: poetry_no_dev(self)
      :property:



   .. method:: python_optimize(self)
      :property:



   .. method:: base_image(self)
      :property:



   .. method:: builder_image(self)
      :property:



   .. method:: aladdinize(self)
      :property:



   .. method:: add_poetry(self)
      :property:



   .. method:: specialized_dockerfile(self)
      :property:



   .. method:: user_info(self)
      :property:



   .. method:: dependencies(self)
      :property:


      Return the topologically sorted list of dependencies required for this component.

      This will include the complete hierarchy of dependencies for this component, so it is only
      necessary to enumerate a component's direct dependencies in the component.yaml file.



.. py:class:: DockerIgnore(ignore_file: typing.IO, original_file_name: str)

   A class to be used to temporarily modify the singleton .dockerignore file for the various
   build steps we undertake in the component building process. This is the core magic that allows
   us to place all of our code under a single docker context but judiciously decide which parts to
   send to each build step.

   .. method:: append_file(self, file_path_to_append: pathlib.Path, prefix: str = '')


      Append the contents of a file to the .dockerignore file.

      If ``prefix`` is provided, any non-comment, non-empty lines will have the prefix applied as
      they are appended to the .dockerignore file.

      :param file_path_to_append: The components/ directory-relative path to the file to append.
      :param prefix: The directory prefix to apply to all lines in the appended file.


   .. method:: ignore_all(self)


      Add a line that instructs docker to not send anything in the context.

      It is expected that this is followed by calls to ``include()``.


   .. method:: ignore_defaults(self)


      Copy the contents of the original .DockerIgnore file into the temporary one.


   .. method:: ignore(self, entry: str)


      Explicitly ignore ``entry``.

      :param entry: The pattern to ignore.


   .. method:: include(self, entry: str)


      Explicitly include ``entry`` after a previous ``ignore_all()`` call.

      :param entry: The pattern to include.


   .. method:: write(self, entry: str)


      Write the entry line with a new-line to the ignore file and then flush the file.

      :param entry: The pattern to write.



.. function:: dockerignore(mode: str)

   A decorator to allow the decorated function to manipulate the .dockerignore file for a build.

   It provides the ignore_file argument to the decorated function with the DockerIgnore instance
   wrapping the already opened file.

   :param mode: The file mode string to use to open the .dockerignore file
   :return: The decorated function


.. function:: main()

   Kick off the build process with data gathered from the system and environment.


.. function:: build(lamp: dict, hash: str, components: typing.List = None, default_python_version: str = '3.8', poetry_version: str = '1.0.5')

   Build each component for the project.

   If components is empty, this will assume each directory in the components/ directory is a
   component and will build each of them.

   :param lamp: The data from the project's lamp.json file.
   :param hash: The build hash provided by ``aladdin build``.
   :param components: The list of components to build, defaults to all of them.
   :param default_python_version: The python version to use for the base image if not provided in
                                  the component's ``component.yaml`` file, defaults to ``"3.8"``.
   :param poetry_version: The version of poetry to install in the component images, defaults to
                          ``"1.0.5"``.


.. function:: read_component_config(component: str) -> ComponentConfig

   Read the component's ``component.yaml`` file into a ``ComponentConfig`` object.

   :param component: The component's config to read.
   :return: The config data for the component. If the component does not provide a
            ``component.yaml`` file, this returns an empty config.


.. function:: build_python_component_image(build_info: BuildInfo)

   Build the component.

   This builds the component image according to the ``component.yaml`` configuration. It begins by
   building or tagging a base image and then adding to it things like the poetry tool and any
   component dependency assets.

   :param build_info: The build info populated from the config and command line arguments.


.. function:: tag_base_image(build_info: BuildInfo)

   Tag the starting point image.

   Most components will build off of the default image (hopefully always somewhat close to the
   latest python release).

   If one does not wish to use the default image, provide another in the ``image.base`` field of
   the ``component.yaml``.

   :param build_info: The build info populated from the config and command line arguments.


.. function:: aladdinize_image(build_info: BuildInfo, ignore_file: DockerIgnore)

   Add the aladdin boilerplate.

   This creates the aladdin-user user and sets the ``WORKDIR`` to ``/code``.

   If one does not wish to add the aladdin boilerplate, specify ``image.aladdinize`` as ``false``
   in the ``component.yaml``.

   :param build_info: The build info populated from the config and command line arguments.
   :param ignore_file: The ``.dockerignore`` file handle to be used to update its contents.


.. function:: add_poetry(build_info: BuildInfo, ignore_file: DockerIgnore)

   Add the poetry package manager to the image.

   This allows one to use the image to create/modify the ``pyproject.toml`` and ``poetry.lock``
   files for a component.

   :param build_info: The build info populated from the config and command line arguments.
   :param ignore_file: The ``.dockerignore`` file handle to be used to update its contents.


.. function:: build_specialized_image(build_info: BuildInfo, ignore_file: DockerIgnore)

   Apply the component's ``Dockerfile`` to the image.

   This allows one to further customize the (possibly aladdinized) base image with more specific
   Dockerfile instructions. The context provided to the Dockerfile is the full ``components/``
   directory, minus the .dockerignore items, of course.

   :param build_info: The build info populated from the config and command line arguments.
   :param ignore_file: The ``.dockerignore`` file handle to be used to update its contents.


.. function:: get_image_details(build_info: BuildInfo) -> (str, UserInfo)

   Extract python version and the user, group and home directory of the image's ``USER``.

   :param build_info: The build info populated from the config and command line arguments.
   :return: The python version string and the user info from the current image.


.. function:: get_image_python_version(build_info: BuildInfo) -> str

   Retrieve the image's python version either from the component.yaml config or the image itself.

   :param build_info: The build info populated from the config and command line arguments.
   :return: The python version string.


.. function:: get_image_user_info(build_info: BuildInfo) -> UserInfo

   Retrieve the image's user info either from the component.yaml config or the image itself.

   :param build_info: The build info populated from the config and command line arguments.
   :return: The user info.


.. function:: add_dependencies(build_info: BuildInfo)

   Add all of the components' dependencies to the image.

   This will iterate recursively over all of the dependencies found in the component's
   component.yaml and copy in the dependencies' poetry-managed libraries as well as the
   dependencies' code itself.

   :param build_info: The build info populated from the config and command line arguments.


.. function:: add_component(build_info: BuildInfo, component: str)

   Add a component's poetry-managed libraries and the component's own assets to the image.

   :param build_info: The build info populated from the config and command line arguments.
   :param component: The component to add to the image.


.. function:: add_component_python_packages(build_info: BuildInfo, component: str, ignore_file: DockerIgnore)

   Add the poetry-managed python packages from the specified component to the image.

   :param build_info: The build info populated from the config and command line arguments.
   :param component: The component's python packages to add to the image.
   :param ignore_file: The ``.dockerignore`` file handle to be used to update its contents.


.. function:: add_component_content(build_info: BuildInfo, component: str, poetry_install_component: bool, ignore_file: DockerIgnore)

   Copy in the component's code and other data.

   This will populate the component's directory in the image.

   :param build_info: The build info populated from the config and command line arguments.
   :param component: The component's content to add to the image.
   :param poetry_install_component: Whether or not to do one final ``poetry install`` for this
                                    component. When this is enabled, this will install any poetry
                                    scripts defined by the component into the ~/.local/bin
                                    directory, thus making them available for unqualified CLI
                                    invocation.
   :param ignore_file: The ``.dockerignore`` file handle to be used to update its contents.


.. function:: build_editor_image(build_info: BuildInfo, ignore_file: DockerIgnore)

   Build a companion image to the final built image that removes the ENTRYPOINT and CMD settings.

   This image can be used for shelling into for debugging and/or running arbitrary commands in a
   mirror of the built image.

   :param build_info: The build info populated from the config and command line arguments.
   :param ignore_file: The ``.dockerignore`` file handle to be used to update its contents.


